;; -*- mode: emacs-lisp -*-
;; This file is loaded by Spacemacs at startup.
;; It must be stored in your home directory.

(defun dotspacemacs/layers ()
  "Configuration Layers declaration.
You should not put any user code in this function besides modifying the variable
values."
  (setq-default
   ;; Base distribution to use. This is a layer contained in the directory
   ;; `+distribution'. For now available distributions are `spacemacs-base'
   ;; or `spacemacs'. (default 'spacemacs)
   dotspacemacs-distribution 'spacemacs
   ;; Lazy installation of layers (i.e. layers are installed only when a file
   ;; with a supported type is opened). Possible values are `all', `unused'
   ;; and `nil'. `unused' will lazy install only unused layers (i.e. layers
   ;; not listed in variable `dotspacemacs-configuration-layers'), `all' will
   ;; lazy install any layer that support lazy installation even the layers
   ;; listed in `dotspacemacs-configuration-layers'. `nil' disable the lazy
   ;; installation feature and you have to explicitly list a layer in the
   ;; variable `dotspacemacs-configuration-layers' to install it.
   ;; (default 'unused)
   dotspacemacs-enable-lazy-installation 'unused
   ;; If non-nil then Spacemacs will ask for confirmation before installing
   ;; a layer lazily. (default t)
   dotspacemacs-ask-for-lazy-installation t
   ;; If non-nil layers with lazy install support are lazy installed.
   ;; List of additional paths where to look for configuration layers.
   ;; Paths must have a trailing slash (i.e. `~/.mycontribs/')
   dotspacemacs-configuration-layer-path '()
   ;; List of configuration layers to load.
   dotspacemacs-configuration-layers
   '(
     ;; ----------------------------------------------------------------
     ;; Example of useful layers you may want to use right away.
     ;; Uncomment some layer names and press <SPC f e R> (Vim style) or
     ;; <M-m f e R> (Emacs style) to install them.
     ;; ----------------------------------------------------------------
     helm
     (auto-completion
      :variables
      auto-completion-enable-sort-by-usage t
      auto-completion-enable-snippets-in-popup t
      )
     better-defaults
     emacs-lisp
     git
     ;;markdown
     (markdown :variables markdown-live-preview-engine 'vmd)
     pandoc
     org
     (shell :variables
            shell-default-height 30
            shell-default-position 'bottom)
     ;;spell-checking - default off
     ;;        https://blog.nijohando.jp/post/beginning-spacemacs/
     ;; SPC t S     スペルチェックを有効 / 無効にする
     ;; SPC S b     バッファに対してスペルチェックを実施
     ;; SPC S c     スペルミスの修正
     ;; SPC S n     次のスペルミスへジャンプ
     (spell-checking :variables spell-checking-enable-by-default nil)
     syntax-checking
     ;;version-control
     yspel
     gtags
     ;;  osx
     python
     emoji
     swift
     haskell
     c-c++
     common-lisp ;; use slime
     rust
     plantuml
     cscope
     themes-megapack
     )
   ;; List of additional packages that will be installed without being
   ;; wrapped in a layer. If you need some configuration for these
   ;; packages, then consider creating a layer. You can also put the
   ;; configuration in `dotspacemacs/user-config'.
   dotspacemacs-additional-packages '( ;; mozc
                                      mozc-im
                                      mozc-popup
                                      slime-company
                                      writeroom-mode
                                      org-variable-pitch
                                      open-junk-file
                                      ob-ipython
                                      yasnippet-snippets ;; yas-snippet
                                      )
   ;; A list of packages that cannot be updated.
   dotspacemacs-frozen-packages '()
   ;; A list of packages that will not be installed and loaded.
   dotspacemacs-excluded-packages '()
   ;; Defines the behaviour of Spacemacs when installing packages.
   ;; Possible values are `used-only', `used-but-keep-unused' and `all'.
   ;; `used-only' installs only explicitly used packages and uninstall any
   ;; unused packages as well as their unused dependencies.
   ;; `used-but-keep-unused' installs only the used packages but won't uninstall
   ;; them if they become unused. `all' installs *all* packages supported by
   ;; Spacemacs and never uninstall them. (default is `used-only')
   dotspacemacs-install-packages 'used-only))

(defun dotspacemacs/init ()
  "Initialization function.
This function is called at the very startup of Spacemacs initialization
before layers configuration.
You should not put any user code in there besides modifying the variable
values."
  ;; This setq-default sexp is an exhaustive list of all the supported
  ;; spacemacs settings.
  (setq-default
   ;; If non nil ELPA repositories are contacted via HTTPS whenever it's
   ;; possible. Set it to nil if you have no way to use HTTPS in your
   ;; environment, otherwise it is strongly recommended to let it set to t.
   ;; This variable has no effect if Emacs is launched with the parameter
   ;; `--insecure' which forces the value of this variable to nil.
   ;; (default t)
   dotspacemacs-elpa-https t
   ;; Maximum allowed time in seconds to contact an ELPA repository.
   dotspacemacs-elpa-timeout 5
   ;; If non nil then spacemacs will check for updates at startup
   ;; when the current branch is not `develop'. Note that checking for
   ;; new versions works via git commands, thus it calls GitHub services
   ;; whenever you start Emacs. (default nil)
   dotspacemacs-check-for-update nil
   ;; If non-nil, a form that evaluates to a package directory. For example, to
   ;; use different package directories for different Emacs versions, set this
   ;; to `emacs-version'.
   dotspacemacs-elpa-subdirectory nil
   ;; One of `vim', `emacs' or `hybrid'.
   ;; `hybrid' is like `vim' except that `insert state' is replaced by the
   ;; `hybrid state' with `emacs' key bindings. The value can also be a list
   ;; with `:variables' keyword (similar to layers). Check the editing styles
   ;; section of the documentation for details on available variables.
   ;; (default 'vim)
   dotspacemacs-editing-style 'hybrid ;; 'vim
   ;; If non nil output loading progress in `*Messages*' buffer. (default nil)
   dotspacemacs-verbose-loading nil
   ;; Specify the startup banner. Default value is `official', it displays
   ;; the official spacemacs logo. An integer value is the index of text
   ;; banner, `random' chooses a random text banner in `core/banners'
   ;; directory. A string value must be a path to an image format supported
   ;; by your Emacs build.
   ;; If the value is nil then no banner is displayed. (default 'official)
   dotspacemacs-startup-banner 'official
   ;; List of items to show in startup buffer or an association list of
   ;; the form `(list-type . list-size)`. If nil then it is disabled.
   ;; Possible values for list-type are:
   ;; `recents' `bookmarks' `projects' `agenda' `todos'."
   ;; List sizes may be nil, in which case
   ;; `spacemacs-buffer-startup-lists-length' takes effect.
   dotspacemacs-startup-lists '((recents . 5)
                                (projects . 7))
   ;; True if the home buffer should respond to resize events.
   dotspacemacs-startup-buffer-responsive t
   ;; Default major mode of the scratch buffer (default `text-mode')
   dotspacemacs-scratch-mode 'lisp-interaction-mode ;;'text-mode
   ;; List of themes, the first of the list is loaded when spacemacs starts.
   ;; Press <SPC> T n to cycle to the next theme in the list (works great
   ;; with 2 themes variants, one dark and one light)
   dotspacemacs-themes '(spacemacs-dark
                         spacemacs-light
                         solarized-light
                         solarized-dark
                        ; leuven
                        ; monokai
                        ; zenburn
                         sanityinc-tomorrow-day
                         sanityinc-tomorrow-night
                         sanityinc-tomorrow-blue
                         sanityinc-tomorrow-bright
                         )
   ;; If non nil the cursor color matches the state color in GUI Emacs.
   dotspacemacs-colorize-cursor-according-to-state t
   ;; Default font, or prioritized list of fonts. `powerline-scale' allows to
   ;; quickly tweak the mode-line size to make separators look not too crappy.
;;   dotspacemacs-default-font '("Source Code Pro"
;;                               :size 13
;;                               :weight normal
;;                               :width normal
;;                               :powerline-scale 1.1)
   dotspacemacs-default-font (cond ((spacemacs/system-is-mswindows)
                                    '("Meiryo UI" ;; "Consolas" ;;"Yu Gothic UI"
                                      :size 16
                                      :weight normal
                                      :width normal
                                      :powerline-scale 1.1))
                                   (t
                                    '("MyricaM M";;"Meiryo UI" ;; "Consolas" ;;"Yu Gothic UI"
                                      :size 16
                                      :weight normal
                                      :width normal
                                      :powerline-scale 1.1))
                                    )
   ;; The leader key
   dotspacemacs-leader-key "SPC"
   ;; The key used for Emacs commands (M-x) (after pressing on the leader key).
   ;; (default "SPC")
   dotspacemacs-emacs-command-key "SPC"
   ;; The key used for Vim Ex commands (default ":")
   dotspacemacs-ex-command-key ":"
   ;; The leader key accessible in `emacs state' and `insert state'
   ;; (default "M-m")
   dotspacemacs-emacs-leader-key "M-m"
   ;; Major mode leader key is a shortcut key which is the equivalent of
   ;; pressing `<leader> m`. Set it to `nil` to disable it. (default ",")
   dotspacemacs-major-mode-leader-key ","
   ;; Major mode leader key accessible in `emacs state' and `insert state'.
   ;; (default "C-M-m")
   dotspacemacs-major-mode-emacs-leader-key "C-M-m"
   ;; These variables control whether separate commands are bound in the GUI to
   ;; the key pairs C-i, TAB and C-m, RET.
   ;; Setting it to a non-nil value, allows for separate commands under <C-i>
   ;; and TAB or <C-m> and RET.
   ;; In the terminal, these pairs are generally indistinguishable, so this only
   ;; works in the GUI. (default nil)
   dotspacemacs-distinguish-gui-tab nil
   ;; If non nil `Y' is remapped to `y$' in Evil states. (default nil)
   dotspacemacs-remap-Y-to-y$ nil
   ;; If non-nil, the shift mappings `<' and `>' retain visual state if used
   ;; there. (default t)
   dotspacemacs-retain-visual-state-on-shift t
   ;; If non-nil, J and K move lines up and down when in visual mode.
   ;; (default nil)
   dotspacemacs-visual-line-move-text nil
   ;; If non nil, inverse the meaning of `g' in `:substitute' Evil ex-command.
   ;; (default nil)
   dotspacemacs-ex-substitute-global nil
   ;; Name of the default layout (default "Default")
   dotspacemacs-default-layout-name "Default"
   ;; If non nil the default layout name is displayed in the mode-line.
   ;; (default nil)
   dotspacemacs-display-default-layout nil
   ;; If non nil then the last auto saved layouts are resume automatically upon
   ;; start. (default nil)
   dotspacemacs-auto-resume-layouts nil
   ;; Size (in MB) above which spacemacs will prompt to open the large file
   ;; literally to avoid performance issues. Opening a file literally means that
   ;; no major mode or minor modes are active. (default is 1)
   dotspacemacs-large-file-size 1
   ;; Location where to auto-save files. Possible values are `original' to
   ;; auto-save the file in-place, `cache' to auto-save the file to another
   ;; file stored in the cache directory and `nil' to disable auto-saving.
   ;; (default 'cache)
   dotspacemacs-auto-save-file-location 'cache
   ;; Maximum number of rollback slots to keep in the cache. (default 5)
   dotspacemacs-max-rollback-slots 5
   ;; If non nil, `helm' will try to minimize the space it uses. (default nil)
   dotspacemacs-helm-resize nil
   ;; if non nil, the helm header is hidden when there is only one source.
   ;; (default nil)
   dotspacemacs-helm-no-header nil
   ;; define the position to display `helm', options are `bottom', `top',
   ;; `left', or `right'. (default 'bottom)
   dotspacemacs-helm-position 'bottom
   ;; Controls fuzzy matching in helm. If set to `always', force fuzzy matching
   ;; in all non-asynchronous sources. If set to `source', preserve individual
   ;; source settings. Else, disable fuzzy matching in all sources.
   ;; (default 'always)
   dotspacemacs-helm-use-fuzzy 'always
   ;; If non nil the paste micro-state is enabled. When enabled pressing `p`
   ;; several times cycle between the kill ring content. (default nil)
   dotspacemacs-enable-paste-transient-state nil
   ;; Which-key delay in seconds. The which-key buffer is the popup listing
   ;; the commands bound to the current keystroke sequence. (default 0.4)
   dotspacemacs-which-key-delay 0.4
   ;; Which-key frame position. Possible values are `right', `bottom' and
   ;; `right-then-bottom'. right-then-bottom tries to display the frame to the
   ;; right; if there is insufficient space it displays it at the bottom.
   ;; (default 'bottom)
   dotspacemacs-which-key-position 'bottom
   ;; If non nil a progress bar is displayed when spacemacs is loading. This
   ;; may increase the boot time on some systems and emacs builds, set it to
   ;; nil to boost the loading time. (default t)
   dotspacemacs-loading-progress-bar t
   ;; If non nil the frame is fullscreen when Emacs starts up. (default nil)
   ;; (Emacs 24.4+ only)
   dotspacemacs-fullscreen-at-startup nil
   ;; If non nil `spacemacs/toggle-fullscreen' will not use native fullscreen.
   ;; Use to disable fullscreen animations in OSX. (default nil)
   dotspacemacs-fullscreen-use-non-native nil
   ;; If non nil the frame is maximized when Emacs starts up.
   ;; Takes effect only if `dotspacemacs-fullscreen-at-startup' is nil.
   ;; (default nil) (Emacs 24.4+ only)
   dotspacemacs-maximized-at-startup nil
   ;; A value from the range (0..100), in increasing opacity, which describes
   ;; the transparency level of a frame when it's active or selected.
   ;; Transparency can be toggled through `toggle-transparency'. (default 90)
   dotspacemacs-active-transparency 90
   ;; A value from the range (0..100), in increasing opacity, which describes
   ;; the transparency level of a frame when it's inactive or deselected.
   ;; Transparency can be toggled through `toggle-transparency'. (default 90)
   dotspacemacs-inactive-transparency 90
   ;; If non nil show the titles of transient states. (default t)
   dotspacemacs-show-transient-state-title t
   ;; If non nil show the color guide hint for transient state keys. (default t)
   dotspacemacs-show-transient-state-color-guide t
   ;; If non nil unicode symbols are displayed in the mode line. (default t)
   dotspacemacs-mode-line-unicode-symbols t
   ;; If non nil smooth scrolling (native-scrolling) is enabled. Smooth
   ;; scrolling overrides the default behavior of Emacs which recenters point
   ;; when it reaches the top or bottom of the screen. (default t)
   dotspacemacs-smooth-scrolling t
   ;; Control line numbers activation.
   ;; If set to `t' or `relative' line numbers are turned on in all `prog-mode' and
   ;; `text-mode' derivatives. If set to `relative', line numbers are relative.
   ;; This variable can also be set to a property list for finer control:
   ;; '(:relative nil
   ;;   :disabled-for-modes dired-mode
   ;;                       doc-view-mode
   ;;                       markdown-mode
   ;;                       org-mode
   ;;                       pdf-view-mode
   ;;                       text-mode
   ;;   :size-limit-kb 1000)
   ;; (default nil)
   dotspacemacs-line-numbers nil
   ;; Code folding method. Possible values are `evil' and `origami'.
   ;; (default 'evil)
   dotspacemacs-folding-method 'evil
   ;; If non-nil smartparens-strict-mode will be enabled in programming modes.
   ;; (default nil)
   dotspacemacs-smartparens-strict-mode nil
   ;; If non-nil pressing the closing parenthesis `)' key in insert mode passes
   ;; over any automatically added closing parenthesis, bracket, quote, etc…
   ;; This can be temporary disabled by pressing `C-q' before `)'. (default nil)
   dotspacemacs-smart-closing-parenthesis nil
   ;; Select a scope to highlight delimiters. Possible values are `any',
   ;; `current', `all' or `nil'. Default is `all' (highlight any scope and
   ;; emphasis the current one). (default 'all)
   dotspacemacs-highlight-delimiters 'all
   ;; If non nil, advise quit functions to keep server open when quitting.
   ;; (default nil)
   dotspacemacs-persistent-server nil
   ;; List of search tool executable names. Spacemacs uses the first installed
   ;; tool of the list. Supported tools are `ag', `pt', `ack' and `grep'.
   ;; (default '("ag" "pt" "ack" "grep"))
   dotspacemacs-search-tools '("rg" "ag" "pt" "ack" "grep")
   ;; The default package repository used if no explicit repository has been
   ;; specified with an installed package.
   ;; Not used for now. (default nil)
   dotspacemacs-default-package-repository nil
   ;; Delete whitespace while saving buffer. Possible values are `all'
   ;; to aggressively delete empty line and long sequences of whitespace,
   ;; `trailing' to delete only the whitespace at end of lines, `changed'to
   ;; delete only whitespace for changed lines or `nil' to disable cleanup.
   ;; (default nil)
   dotspacemacs-whitespace-cleanup nil
   )
  (add-to-list 'exec-path "~/.local/bin")
  (setq tramp-ssh-controlmaster-options
        "-o ControlMaster=auto -o ControlPath='~/.ssh/tramp-%%r@%%h:%%p' -o ControlPersist=no")
  ;;"-o ControlMaster=auto -o ControlPersist=no")

  ;;(setq backup-directory-alist (cons (cons "\\.*$" (expand-file-name "~/.emacs.d/backup"))
  ;;                                   backup-directory-alist))
  (eval-after-load 'tramp '(setenv "SHELL" "/bin/bash"))
  )
;;----------
;; http_proxy環境変数があるかどうかでproxy設定するかを決める。

(defun set-proxy ()
(when (getenv "http_proxy")
  (cl-flet (
    ;; get user:passwd entry from http_proxy environment var and base64-encode it.
    (get-passwd-encode-string ()
      (let* ((ev (getenv "http_proxy"))
      (x (decode-coding-string (url-unhex-string ev) 'utf-8))
      )
        (if (not (equal x ""))
      (base64-encode-string 
      (substring x (+ 2 (string-match "//" x)) (string-match "@" x))
      )
    nil)))
    (get-proxy-url-string ()
      (let* ((ev (getenv "http_proxy"))
      (x (decode-coding-string (url-unhex-string ev) 'utf-8))
      )
        (if (not (equal x ""))
      (substring x (+ 1 (string-match "@" x)))
        ""))) )
  ;; proxy service var
  (setq url-proxy-services `(("no_proxy" . "^\\(localhost \\| 10.*\\)")
            ("http"  . ,(get-proxy-url-string))
            ("https" . ,(get-proxy-url-string))
            ))
  ;; あと、gitのglobal設定で追加しておくこと。
  ;; cf.  http://sunday-programming.hatenablog.com/entry/2013/10/31/202918
  ;;
  ;; > git config --global http.proxy http://proxy.hogedomain.com:8080
  ;; > git config --global https.proxy http://proxy.hogedomain.com:8080
  ;; > git config --global url."https://".insteadOf git://
  ;; > git config --list  <-- これで確認

  ;; from   http://yoshimov.com/tips/emacs-package-list-with-proxy/
  ;; set value of (base64-decode-string "user:passwd") to last string in the following.
  ;;(url-basic-auth (getenv "http_proxy"))
  (setq url-http-proxy-basic-auth-storage
  `(( ,(get-proxy-url-string) ("Proxy" .  ,(get-passwd-encode-string)  ))))
  )))

;;----------
(defun dotspacemacs/user-init ()
  "Initialization function for user code.
It is called immediately after `dotspacemacs/init', before layer configuration
executes.
 This function is mostly useful for variables that need to be set
before packages are loaded. If you are unsure, you should try in setting them in
`dotspacemacs/user-config' first."

  ;;(setq url-debug t)
  ;;(when (executable-find "curl")
  ;;  (setq request-curl (executable-find "curl"))
  ;;  (setq request-backend 'curl)
  ;;)
  ;;(setq dotspacemacs-elpa-https nil)
  ;;(setq dotspacemacs-elpa-timeout 30)
  (set-proxy)
  ;; for paradox  my github token
  (setq paradox-github-token "11eb68cf713205b504d0c22363d9e06229004a96")
  ;; pandoc
  (when (file-exists-p "c:/Program Files/Pandoc/pandoc.exe")
    (custom-set-variables
     '(org-pandoc-command "c:/Program Files/Pandoc/pandoc.exe"))
                                        ;(setq markdown-comman "c:/Program Files/Pandoc/pandoc.exe --smart -f markdown -t html")
    )
  )

;;
;; evil normal modeでC-n C-pで普通は上下に移動したい。
;;
(defun my/evil-paste-pop-n ()
(interactive)
(if (eq last-command 'evil-paste-after) (evil-paste-pop -1)
  (next-line))
)

(defun my/evil-paste-pop ()
(interactive)
(if (eq last-command 'evil-paste-after) (evil-paste-pop 1)
  (previous-line))
)

;; c-mode おすすめ設定 https://seesaawiki.jp/whiteflare503/d/Emacs%20%a5%a4%a5%f3%a5%c7%a5%f3%a5%c8
(defun my-c-mode-common-conf ()
  ;; (electric-mode + 自動インデント + 欲張り削除) ";"を押すと現在の行を
  ;; 再インデントして自動的に改行をするモードのなる設定。これは強力すぎて扱いづらい。
  ;; (c-toggle-auto-hungry-state 1)

  ;; (electric-mode) ";"や"{"などをを入力した場合現在の行を自動インデントを有功にする
  ;; (c-toggle-electric-state 1)

  ;; (欲張り削除 + electric-mode)バックスペースなどの削除するキーを押すと
  ;; スペースを一気に消す欲張り削除機能とelecetic-modeをを有功にする
  (c-toggle-hungry-state 1)

  ;; この関数は廃れた機能 (obsoleteされた)ものなので、emacsのバージョンが22.1以上なら使わないこと
  ;; (c-toggle-auto-state 1)　obsoleted

  ;; (自動インデント) 改行をしたら次の行を自動でインデントしてくれる
  ;; (c-toggle-auto-newline 1)

  ;; C-m を newline-and-indentに設定する
  ;; しかしこれをするとEnterのキーマップまで影響するので
  ;; 大人しくC-jを使ったnewline-and-indentを使うほうが
  ;; (define-key c-mode-base-map ""\C-m" 'newline-and-indent)

  ;(c-set-style "stroustrup")                  ;; スタイルはストラウストラップ
  ;(c-set-style "cc-mode")                     ;; スタイルはcc-mode indent=4
  ;(c-set-style "bsd")
  (c-set-style "linux")
  ;(flyspell-prog-mode)                        ;; flyspell-prog-mode(自動ispell機能)
  (show-paren-mode t)                         ;; カッコを強調表示する

  ;; 他のエディタなどがファイルを書き換えたらすぐにそれを反映する
  ;; auto-revert-modeを有効にする
  (auto-revert-mode)
  )

(defun dir-search (a)
  (cond ((null a) nil)
        ((file-directory-p (car a)) (car a))
        (t (dir-search (cdr a)))))
(defvar msys2-directory "Directory of msys2")


(defun dotspacemacs/user-config ()
  "Configuration function for user code.
This function is called at the very end of Spacemacs initialization after
layers configuration.
This is the place where most of your configurations should be done. Unless it is
explicitly specified that a variable should be set before a package is loaded,
you should place your code here."

  ;; spacemacsのカスタマイズは、
  ;; - dotspacemacs/user-config()
  ;; - dotspacemacs-additional-packages 変数　  spacemacs/private/localの下
  ;; - layerを作る。                            spacemacs/privateの下
  ;; の３つが考えられる。

  ;; 既存パッケージの動作変更は、
  ;; spacemacs|use-package-add-hook　が使える。
  ;;    (spacemacs|use-package-add-hook org-mode
  ;;            :post-config
  ;;            (progn ...)
  ;;    )

  (require 'use-package)
  (require 'bind-key)
  ;; font
  (cond ((spacemacs/system-is-mswindows)
         (set-face-attribute 'variable-pitch nil
                             :family "Yu Mincho"
                             :height 140)
         (set-face-attribute 'fixed-pitch nil
                             :family "Meiryo UI"
                             :height 140)
         )
        (t
         (set-face-attribute 'variable-pitch nil
                             :family "MyricaM N";;"Yu Mincho"
                             :height 140)
         (set-face-attribute 'fixed-pitch nil
                             :family "MyricaM M";;"Consolas"
                             :height 140)
         ))

  ;; use mozc if found (linux only)
  (when (and (require 'mozc-im nil t) (spacemacs/system-is-linux))
    ;; mozcがrequireでloadされるときにのみ設定。
    ;; そのためには、paradox-list-packageで mozc, mozc-in, mozc-popups, ac-mozc をインストールしておくこと。
    ;;
    (setq default-input-method "japanese-mozc-im")
    ;; for 101us keyboard
    (setq mozc-keymap-kana mozc-keymap-kana-101us)
    ;;
    (require 'mozc-popup)
    (setq mozc-candidate-style 'popup)
    ;;(require 'ac-mozc)
    ;;(define-key ac-mode-map (bkd "C-c C-\\") 'ac-complete-mozc)
    )
  ;; windows only
  (when (spacemacs/system-is-mswindows)
    ;; exec path   https://nagayasu-shinya.com/emacs-msys2-path/
    ;; MSYS2 のコマンドを使えるようにする.
    (setq msys2-directory (dir-search '("c:/msys32" "c:/msys64" "d:/msys32" "d:/msys64")))

    (setenv "PATH"
            (concat
             ;; 下記の行に MSYS2 のコマンドの実行可能ファイルがある場所を設定してください. スラッシュが2つ連続することに注意！
             ;; 区切り文字はセミコロン
             "C:\\msys32\\usr\\bin;"
             (getenv "PATH")))
    ;; 区切り文字はなし
    (setq exec-path (append exec-path '("C:\\msys32\\usr\\bin")))

    ;;
    ;; https://qiita.com/KazuSoap/items/ee7a4dec80308dbd1d41
    ;;
    (setq shell-command-switch "-c")

    ;; シェルからの起動では exec-path-from-shell を実行しない
    (let ((shell-level (getenv "SHLVL")))
      (when (or (not shell-level) (string= "0" shell-level))
        (when (eq system-type 'windows-nt)
          ;; bash のフルパスを指定
          (setq shell-file-name "c:/msys64/usr/bin/bash")
          (defvar explicit-shell-file-name)
          (setq explicit-shell-file-name shell-file-name)
          (setenv "SHELL" shell-file-name)

          ;; msys2 のみの設定 mingw64 とパスを共有
          ;;(setenv "MSYSTEM" "MING")
          (setenv "MSYSTEM" "MINGW64")

          ;; 環境変数 PATH のときのみパスの変換を実行
          (defun ad-exec-path-from-shell-setenv (orig-fun &rest args)
            (when (string=  (car args) "PATH")
              (setf (nth 1 args)
                    (with-temp-buffer
                      (call-process "c:/msys64/usr/bin/cygpath"
                                    nil '(t nil) nil "-amp" (nth 1 args))
                      (unless (bobp)
                        (goto-char (point-min))
                        (buffer-substring-no-properties (point)
                                                        (line-end-position))))))
            (apply orig-fun args))
          (advice-add 'exec-path-from-shell-setenv
                      :around 'ad-exec-path-from-shell-setenv))

        ;; 引き継ぎたい環境変数を列挙
        (exec-path-from-shell-copy-envs '("PATH" "MANPATH" "PKG_CONFIG_PATH"))))
    )

  ;; ime
  ;(defun toggle-ime ()
  ;  (interactive)
  ;  (when (eq evil-state 'hybrid)
  ;    (toggle-input-method)))

  ;(bind-key [zenkaku-hankaku] 'toggle-ime)
  ;(bind-key [kanji] 'toggle-ime)

  ;(defun force-ime-off ()
  ;  (interactive)
  ;  (when current-input-method
  ;    (evil-deactivate-input-method)))
  ;(add-hook 'evil-hybrid-state-exit-hook 'force-ime-off)

  ;; ripgrep (rg)
  (setq helm-grep-ag-command  "rg --color=always --smart-case --no-heading --line-number %s %s %s")
  (setq helm-ag-base-command "rg -S --vimgrep --no-heading")

  ;; cua-mode 矩形編集開始：C-c u
  ;;    https://d.akinori.org/2012/06/14/emacsの範囲選択uiを大幅拡張してくれるcua-mode/
  (cua-mode t)
  (setq cua-enable-cua-keys nil) ;; cua-mode の不要なキーバインドは除去
  ;;(define-key global-map (kbd "C-RET") 'cua-set-rectangle-mark)
  (bind-key "C-c u" 'cua-set-rectangle-mark) ;; C-c uのあと、Shift+→とかで範囲選択
  ;; -- 矩形選択中のキーバインド --
  ;;  M-p	矩形の幅を固定
  ;;  M-b	空白文字で埋める。 open-rectangle と同等
  ;;  M-s	文字列で置き換える。 string-rectangle と同等
  ;;  M-f	1種類の文字で埋める。 string-rectangle で1文字指定したときと同等
  ;;  M-i	矩形領域内の数字をインクリメントする
  ;;  M-n	矩形領域を連番で埋める。フォーマット指定可

  ;; C言語系のモード全てに適用されるフック
  ;; c-mode-common-hookにフックを設定する
  (add-hook 'c-mode-common-hook 'my-c-mode-common-conf)

  ;; more colors in emacs terminals : need package eterm-256color
  (add-hook 'term-mode-hook #'eterm-256color-mode)

  ;; ispell
  ;;   http://keisanbutsuriya.hateblo.jp/entry/2015/02/10/152543
  ;;    使う前に
  ;;    $ echo "lang en_US" >> ~/.aspell.conf
  ;;   やっておく。
  ;;(with-eval-after-load 'org )
  (with-eval-after-load "ispell"
    (setq-default ispell-program-name "aspell")
    (add-to-list 'ispell-skip-region-alist '("[^\000-\377]+"))
    ;; key bind
    (global-set-key (kbd "<f8>") 'ispell-word)
    (global-set-key (kbd "C-<f8>") 'flyspell-mode)

    (setq ispell-local-dictionary "en_US")
    (setq ispell-local-dictionary-alist
          '(("en_US" "[[:alpha:]]" "[^[:alpha:]]" "[']" nil nil nil utf-8)))
    ;; set 'lang en_US' in ~/.aspell.conf
    )

  ;;
  ;; open-junk-file
  ;;   http://ongaeshi.hatenablog.com/entry/org-and-open-junk-memo-life
  (require 'open-junk-file)
  (setq open-junk-file-format "~/Google ドライブ/memo/%Y-%m%d-%H%M%S.")
  (bind-key "C-x j" 'open-junk-file) ;; C-c uのあと、Shift+→とかで範囲選択
  ;;
  ;; yas-snippets   https://github.com/syl20bnr/spacemacs/issues/10316
  (setq yas-snippet-dirs
        '("~/.emacs.d/private/snippets")
        )
  (yasnippet-snippets-initialize)
  ;;
  (require 'org)
  (require 'ob-C)
  ;;(require 'ob-ruby)
  (require 'ob-ipython)
  (customize-set-variable 'org-directory "~/Google ドライブ/memo")
  (customize-set-variable 'org-agenda-files (list org-directory))
  (customize-set-variable 'org-src-fontify-natively t)

  (bind-keys :map org-mode-map
             ("C-c a" . org-show-all)	; 全展開
             )

  ;; https://qiita.com/Duct-and-rice/items/ad77ab8b41b0cd83f1ec
  (require 'org-variable-pitch)
  (add-hook 'org-mode-hook 'org-variable-pitch-minor-mode)
  (add-hook 'org-mode-hook 'visual-fill-column-mode)
  (add-hook 'org-mode-hook 'visual-line-mode)
  ;;
  (org-link-set-parameters "file+emacs") ;since Org 9.0
  (org-link-set-parameters "file+sys") ;since Org 9.0

  ;; use company for auto-complete every mode
  ;;(global-company-mode)

  ;; use Marked2 for markdown open command
  ;; via: http://jblevins.org/log/marked-2-command
  ;;(setq markdown-open-command "/usr/local/bin/mark")
  ;;(setq markdown-open-command "/usr/local/bin/markdown")
  ;;(setq markdown-command "/usr/bin/pandoc --smart -f markdown -t html")
  ;; see via https://github.com/syl20bnr/spacemacs/issues/2032
  (fset 'evil-visual-update-x-selection 'ignore)

  ;; editorconfig-mode enabled
  ;;(editorconfig-mode 1)

  (bind-key "M-n" 'evil-normal-state)
  (bind-key "C-n" 'my/evil-paste-pop-n evil-normal-state-map)
  (bind-key "C-p" 'my/evil-paste-pop   evil-normal-state-map)
  (bind-key "g@" 'set-mark-command     evil-normal-state-map)

  ;; gtags personal-keybindings
  (spacemacs/helm-gtags-define-keys-for-mode 'c-mode)
  (spacemacs/helm-gtags-define-keys-for-mode 'c++-mode)
  ;;(add-hook 'c-mode-hook 'helm-gtags-mode)
  ;;(add-hook 'c++-mode-hook 'helm-gtags-mode)
  ;;(add-hook 'java-mode-hook 'helm-gtags-mode)
  ;;(add-hook 'asm-mode-hook 'helm-gtags-mode)
  ;; customize
  (custom-set-variables
   '(helm-gtags-path-style 'relative)
   '(helm-gtags-ignore-case t)
   '(helm-gtags-auto-update t))

  (progn
    (bind-key* "M-g t t" 'helm-gtags-find-tag)
    (bind-key* "M-g t r" 'helm-gtags-find-rtag)
    (bind-key* "M-g t s" 'helm-gtags-find-symbol)
    (bind-key* "M-g t p" 'helm-gtags-parse-file)
    (bind-key* "M-g t <" 'helm-gtags-previous-history)
    (bind-key* "M-g t >" 'helm-gtags-next-history))

  (bind-keys*
   ("M-g M-b" . helm-buffers-list) ;; buffer-list
   ;;("M-x"   . helm-M-x)        ;; smexをつかう。
   ("M-g x"   . helm-M-x)  ;; call helm-M-x
   ("M-g M-i" . helm-imenu) ;; call imenu by M-gi
   ("M-g M-l" . helm-recentf)
   ("M-g M-u" . helm-resume)        ;; same as C-x c b
   ("M-g M-f" . helm-find-files)    ;; call anything by M-gf
   ("M-g M-m" . helm-mini)          ;; call helm-mini by M-gm
   ("M-g M-y" . helm-show-kill-ring) ;; kill-ring履歴一覧表示
   ;;   ("M-g C-g" . helm-git-find-files)
   ("M-g M-;" . helm-browse-project)
   ;; helm-ag
   ("M-g a g" . helm-ag)
   ("M-g a t" . helm-ag-this-file)
   ("M-g a p" . helm-ag-pop-stack)
   ("M-g a c" . helm-ag-clear-stack)
   ;; swoop
   ("M-'"     . helm-swoop)  ;; standard command is 'SPC s s'
   ("M-\""    . helm-swoop-back-to-last-point)
   ("C-c M-'" . helm-multi-swoop)
   ("C-x M-'" . helm-multi-swoop-all)
   )

  (spacemacs/set-leader-keys
    "@"   'set-mark-command ;; SPC @   to  set-mark-command (\C-SPC)
    "aa"  'set-mark-command ;; SPC aa  to  set-mark-command (\C-SPC)
    "ag"  'helm-ag)         ;; SPC ag
  (custom-set-variables     ;; use ripgrep with helm-ag.
   '(helm-ag-base-command "rg --vimgrep --no-heading --smart-case"))

  ;; for OSX
  (when (spacemacs/system-is-mac)
;;;; from https://moneyforward.com/engineers_blog/2016/04/07/the-third-editor/
    ;; 入力ソースの設定が必要
    ;;    (defun mac-selected-keyboard-input-source-change-hook-func ()
    ;; 入力モードが英語の時はカーソルの色をorangeに、日本語の時はredにする
    ;;      (set-cursor-color (if (string-match "\\.Roman$" (mac-input-source))
    ;;                            "orange" "red")))
    ;;    (add-hook 'mac-selected-keyboard-input-source-change-hook
    ;;              'mac-selected-keyboard-input-source-change-hook-func)
    ;; evilのnormal-stateになったらIMEを英語に戻す
    ;;    (add-hook 'evil-normal-state-entry-hook
    ;;              '(lambda () (mac-select-input-source "com.google.inputmethod.Japanese.Roman")))
    ;; EmacsをアクティブにしたらIMEを英語に戻す
    ;;    (add-hook 'focus-in-hook
    ;;              '(lambda () (mac-select-input-source "com.google.inputmethod.Japanese.Roman")))
    )

  )
;; Do not write anything past this comment. This is where Emacs will
;; auto-generate custom variable definitions.
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(helm-gtags-auto-update t t)
 '(helm-gtags-ignore-case t t)
 '(helm-gtags-path-style (quote relative))
 '(org-pandoc-command "c:/Program Files/Pandoc/pandoc.exe")
 '(package-selected-packages
   (quote
    (lv flyspell-correct-helm flyspell-correct auto-dictionary transient yasnippet-snippets writeroom-mode visual-fill-column org-variable-pitch ob-ipython helm-cscope xcscope white-sand-theme rebecca-theme spinner org-category-capture alert log4e gntp org-mime mozc hydra dash-functional parent-mode projectile request gitignore-mode pos-tip pkg-info epl flx exotica-theme ghub let-alist iedit anzu highlight autothemer company rust-mode bind-map yasnippet packed anaconda-mode pythonic f dash s avy helm-core async auto-complete popup zenburn-theme use-package solarized-theme ox-pandoc monokai-theme markdown-toc markdown-mode intero inkpot-theme gruvbox-theme evil-mc evil-matchit darkokai-theme ghc smartparens evil undo-tree haskell-mode flycheck helm org-plus-contrib magit magit-popup with-editor slime powerline zonokai-theme zen-and-art-theme yapfify xterm-color ws-butler winum which-key volatile-highlights vmd-mode vi-tilde-fringe uuidgen unfill underwater-theme ujelly-theme twilight-theme twilight-bright-theme twilight-anti-bright-theme tronesque-theme toxi-theme toml-mode toc-org tao-theme tangotango-theme tango-plus-theme tango-2-theme swift-mode sunny-day-theme sublime-themes subatomic256-theme subatomic-theme spaceline spacegray-theme soothe-theme soft-stone-theme soft-morning-theme soft-charcoal-theme smyx-theme smeargle slime-company shell-pop seti-theme reverse-theme restart-emacs rainbow-delimiters railscasts-theme racer pyvenv pytest pyenv-mode py-isort purple-haze-theme professional-theme popwin plantuml-mode planet-theme pip-requirements phoenix-dark-pink-theme phoenix-dark-mono-theme persp-mode pcre2el pastels-on-dark-theme paradox pandoc-mode orgit organic-green-theme org-projectile org-present org-pomodoro org-download org-bullets open-junk-file omtose-phellack-theme oldlace-theme occidental-theme obsidian-theme noctilux-theme niflheim-theme neotree naquadah-theme mwim mustang-theme multi-term mozc-popup mozc-im move-text monochrome-theme molokai-theme moe-theme mmm-mode minimal-theme material-theme majapahit-theme magit-gitflow madhat2r-theme macrostep lush-theme lorem-ipsum live-py-mode linum-relative link-hint light-soap-theme jbeans-theme jazz-theme ir-black-theme info+ indent-guide hy-mode hungry-delete htmlize ht hlint-refactor hl-todo hindent highlight-parentheses highlight-numbers highlight-indentation hide-comnt heroku-theme hemisu-theme help-fns+ helm-themes helm-swoop helm-pydoc helm-projectile helm-mode-manager helm-make helm-hoogle helm-gtags helm-gitignore helm-flx helm-descbinds helm-company helm-c-yasnippet helm-ag hc-zenburn-theme haskell-snippets gruber-darker-theme grandshell-theme goto-chg gotham-theme google-translate golden-ratio gnuplot gitconfig-mode gitattributes-mode git-timemachine git-messenger git-link git-commit gh-md ggtags gandalf-theme fuzzy flycheck-rust flycheck-pos-tip flycheck-haskell flx-ido flatui-theme flatland-theme firebelly-theme fill-column-indicator farmhouse-theme fancy-battery eyebrowse expand-region exec-path-from-shell evil-visualstar evil-visual-mark-mode evil-unimpaired evil-tutor evil-surround evil-search-highlight-persist evil-numbers evil-nerd-commenter evil-magit evil-lisp-state evil-indent-plus evil-iedit-state evil-exchange evil-escape evil-ediff evil-args evil-anzu eval-sexp-fu espresso-theme eshell-z eshell-prompt-extras esh-help emoji-cheat-sheet-plus elisp-slime-nav dumb-jump dracula-theme django-theme disaster diminish define-word darktooth-theme darkmine-theme darkburn-theme dakrone-theme cython-mode cyberpunk-theme company-statistics company-ghci company-ghc company-emoji company-cabal company-c-headers company-anaconda common-lisp-snippets column-enforce-mode color-theme-sanityinc-tomorrow color-theme-sanityinc-solarized cmm-mode cmake-mode clues-theme clean-aindent-mode clang-format cherry-blossom-theme cargo busybee-theme bubbleberry-theme birds-of-paradise-plus-theme bind-key badwolf-theme auto-yasnippet auto-highlight-symbol auto-compile apropospriate-theme anti-zenburn-theme ample-zen-theme ample-theme alect-themes aggressive-indent afternoon-theme adaptive-wrap ace-window ace-link ace-jump-helm-line ac-ispell)))
 '(paradox-automatically-star t))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(default ((t (:background nil)))))
